package main

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"net/http"
	"os"
	"time"
)

type BtcTransactionsAutoGenerated struct {
	Hash160       string `json:"hash160"`
	Address       string `json:"address"`
	NTx           int    `json:"n_tx"`
	NUnredeemed   int    `json:"n_unredeemed"`
	TotalReceived int    `json:"total_received"`
	TotalSent     int    `json:"total_sent"`
	FinalBalance  int    `json:"final_balance"`
	Txs           []struct {
		Hash        string `json:"hash"`
		Ver         int    `json:"ver"`
		VinSz       int    `json:"vin_sz"`
		VoutSz      int    `json:"vout_sz"`
		Size        int    `json:"size"`
		Weight      int    `json:"weight"`
		Fee         int    `json:"fee"`
		RelayedBy   string `json:"relayed_by"`
		LockTime    int    `json:"lock_time"`
		TxIndex     int64  `json:"tx_index"`
		DoubleSpend bool   `json:"double_spend"`
		Time        int    `json:"time"`
		BlockIndex  int    `json:"block_index"`
		BlockHeight int    `json:"block_height"`
		Inputs      []struct {
			Sequence int64  `json:"sequence"`
			Witness  string `json:"witness"`
			Script   string `json:"script"`
			Index    int    `json:"index"`
			PrevOut  struct {
				TxIndex           int64  `json:"tx_index"`
				Value             int    `json:"value"`
				N                 int    `json:"n"`
				Type              int    `json:"type"`
				Spent             bool   `json:"spent"`
				Script            string `json:"script"`
				SpendingOutpoints []struct {
					TxIndex int64 `json:"tx_index"`
					N       int   `json:"n"`
				} `json:"spending_outpoints"`
				Addr string `json:"addr"`
			} `json:"prev_out"`
		} `json:"inputs"`
		Out []struct {
			Type              int  `json:"type"`
			Spent             bool `json:"spent"`
			Value             int  `json:"value"`
			SpendingOutpoints []struct {
				TxIndex int64 `json:"tx_index"`
				N       int   `json:"n"`
			} `json:"spending_outpoints"`
			N       int    `json:"n"`
			TxIndex int64  `json:"tx_index"`
			Script  string `json:"script"`
			Addr    string `json:"addr"`
		} `json:"out"`
		Result  int `json:"result"`
		Balance int `json:"balance"`
	} `json:"txs"`
}

type BtcPriceAutoGenerated struct {
	ID           string `json:"id"`
	Symbol       string `json:"symbol"`
	Name         string `json:"name"`
	Localization struct {
		En string `json:"en"`
	} `json:"localization"`
	Image struct {
		Thumb string `json:"thumb"`
		Small string `json:"small"`
	} `json:"image"`
	MarketData struct {
		CurrentPrice struct {
			Usd float64 `json:"usd"`
		} `json:"current_price"`
		MarketCap struct {
			Usd float64 `json:"usd"`
		} `json:"market_cap"`
		TotalVolume struct {
			Usd float64 `json:"usd"`
		} `json:"total_volume"`
	} `json:"market_data"`
	CommunityData struct {
		FacebookLikes            interface{} `json:"facebook_likes"`
		TwitterFollowers         int         `json:"twitter_followers"`
		RedditAveragePosts48H    float64     `json:"reddit_average_posts_48h"`
		RedditAverageComments48H float64     `json:"reddit_average_comments_48h"`
		RedditSubscribers        int         `json:"reddit_subscribers"`
		RedditAccountsActive48H  string      `json:"reddit_accounts_active_48h"`
	} `json:"community_data"`
	DeveloperData struct {
		Forks                        int `json:"forks"`
		Stars                        int `json:"stars"`
		Subscribers                  int `json:"subscribers"`
		TotalIssues                  int `json:"total_issues"`
		ClosedIssues                 int `json:"closed_issues"`
		PullRequestsMerged           int `json:"pull_requests_merged"`
		PullRequestContributors      int `json:"pull_request_contributors"`
		CodeAdditionsDeletions4Weeks struct {
			Additions interface{} `json:"additions"`
			Deletions interface{} `json:"deletions"`
		} `json:"code_additions_deletions_4_weeks"`
		CommitCount4Weeks int `json:"commit_count_4_weeks"`
	} `json:"developer_data"`
	PublicInterestStats struct {
		AlexaRank   int         `json:"alexa_rank"`
		BingMatches interface{} `json:"bing_matches"`
	} `json:"public_interest_stats"`
}

func UnixToDate(timestamp int) string {
	date := time.Unix(int64(timestamp), 0)
	return date.Format("02-01-2006")
}

func getBtcTransactions(address string) BtcTransactionsAutoGenerated {

	apiUrl := "https://blockchain.info/rawaddr/"
	fmt.Println(address)

	response, err := http.Get(apiUrl + address)

	if err != nil {
		fmt.Print(err.Error())
		os.Exit(1)
	}

	responseData, err := ioutil.ReadAll(response.Body)
	if err != nil {
		log.Fatal(err)
	}

	var responseObject BtcTransactionsAutoGenerated
	json.Unmarshal(responseData, &responseObject)

	return responseObject
}

func getBtcPrice(timestamp int) float64 {

	apiUrl := "https://api.coingecko.com/api/v3/coins/bitcoin/history?date="
	response, err := http.Get(apiUrl + UnixToDate(timestamp))

	if err != nil {
		fmt.Print(err.Error())
		os.Exit(1)
	}

	responseData, err := ioutil.ReadAll(response.Body)
	if err != nil {
		log.Fatal(err)
	}

	var responseObject BtcPriceAutoGenerated
	json.Unmarshal(responseData, &responseObject)

	return responseObject.MarketData.CurrentPrice.Usd
}

func sell(transactions BtcTransactionsAutoGenerated, address string) (float64, float64) {

	var sumSellValue float64 = 0
	var sumSellUsd float64 = 0

	for _, s := range transactions.Txs {
		for _, input := range s.Inputs {
			if input.PrevOut.Addr == address {
				price := getBtcPrice(s.Time)
				value := float64(input.PrevOut.Value) / float64(100000000)

				fmt.Println("date: ", UnixToDate(s.Time))
				fmt.Println("price: ", price)
				fmt.Println("value: ", value)

				sumSellValue += value
				sumSellUsd += price * value
				fmt.Println(" ")
			}
		}
	}

	return sumSellValue, sumSellUsd
}

func buy(transactions BtcTransactionsAutoGenerated, address string) (float64, float64) {

	var sumBuyValue float64 = 0
	var sumBuyUsd float64 = 0
	for _, s := range transactions.Txs {
		for _, input := range s.Out {
			if input.Addr == address {
				price := getBtcPrice(s.Time)
				value := float64(input.Value) / float64(100000000)

				fmt.Println("date: ", UnixToDate(s.Time))
				fmt.Println("price: ", price)
				fmt.Println("value: ", value)

				sumBuyValue += value
				sumBuyUsd += price * value
				fmt.Println(" ")
			}
		}
	}

	return sumBuyValue, sumBuyUsd
}

func main() {

	address := "bc1qn3my6jpyujznfzu49ev45qwlrdw6qrv8sz4rky"
	transactions := getBtcTransactions(address)

	// Sells
	sumSellValue, sumSellUsd := sell(transactions, address)

	// Buys
	sumBuyValue, sumBuyUsd := buy(transactions, address)

	fmt.Println("sumSellValue: ", sumSellValue)
	fmt.Println("sumSellUsd: ", sumSellUsd)
	fmt.Println(" ")

	fmt.Println("sumBuyValue: ", sumBuyValue)
	fmt.Println("sumBuyUsd: ", sumBuyUsd)
	fmt.Println(" ")

	fmt.Println("Income in USD: ", sumSellUsd-sumBuyUsd)
	fmt.Println("Remaining BTC: ", sumSellValue-sumBuyValue)
	fmt.Println(" ")
}
